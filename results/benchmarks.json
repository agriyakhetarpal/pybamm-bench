{
    "time_setup_models_and_sims.TimeBuildDFN.time_setup_DFN": {
        "code": "class TimeBuildDFN:\n    def time_setup_DFN(self, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.DFN()\n        self.param.process_model(self.model)\n        compute_discretisation(self.model, self.param).process_model(self.model)",
        "min_run_count": 2,
        "name": "time_setup_models_and_sims.TimeBuildDFN.time_setup_DFN",
        "number": 0,
        "param_names": [
            "parameter"
        ],
        "params": [
            [
                "'Marquis2019'",
                "'ORegan2021'",
                "'NCA_Kim2011'",
                "'Prada2013'",
                "'Ai2020'",
                "'Ramadass2004'",
                "'Mohtat2020'",
                "'Chen2020'",
                "'Chen2020_plating'",
                "'Ecker2015'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "5294948f9d12b08e0ca91e872f066e08b04cc20a728431d490a7f389fb25d4cb",
        "warmup_time": -1
    },
    "time_setup_models_and_sims.TimeBuildDFNSimulation.time_setup_DFN_simulation": {
        "code": "class TimeBuildDFNSimulation:\n    def time_setup_DFN_simulation(self, with_experiment, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.DFN()\n        if with_experiment:\n            exp = pybamm.Experiment(\n                [\n                    \"Discharge at 0.1C until 3.105 V\",\n                ]\n            )\n            pybamm.Simulation(self.model, parameter_values=self.param, experiment=exp)\n        else:\n            pybamm.Simulation(self.model, parameter_values=self.param, C_rate=1)",
        "min_run_count": 2,
        "name": "time_setup_models_and_sims.TimeBuildDFNSimulation.time_setup_DFN_simulation",
        "number": 0,
        "param_names": [
            "with experiment",
            "parameter"
        ],
        "params": [
            [
                "False",
                "True"
            ],
            [
                "'Marquis2019'",
                "'ORegan2021'",
                "'NCA_Kim2011'",
                "'Prada2013'",
                "'Ai2020'",
                "'Ramadass2004'",
                "'Mohtat2020'",
                "'Chen2020'",
                "'Chen2020_plating'",
                "'Ecker2015'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "bec1ef0368e5b10eb69f23a0228764e22ba74a9ce379a2d632fe081d9b554772",
        "warmup_time": -1
    },
    "time_setup_models_and_sims.TimeBuildSPM.time_setup_SPM": {
        "code": "class TimeBuildSPM:\n    def time_setup_SPM(self, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.SPM()\n        self.param.process_model(self.model)\n        compute_discretisation(self.model, self.param).process_model(self.model)",
        "min_run_count": 2,
        "name": "time_setup_models_and_sims.TimeBuildSPM.time_setup_SPM",
        "number": 0,
        "param_names": [
            "parameter"
        ],
        "params": [
            [
                "'Marquis2019'",
                "'ORegan2021'",
                "'NCA_Kim2011'",
                "'Prada2013'",
                "'Ai2020'",
                "'Ramadass2004'",
                "'Mohtat2020'",
                "'Chen2020'",
                "'Chen2020_plating'",
                "'Ecker2015'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9cc0fc69309859c6bf4b82d51013e8fe94dd813b79bac34773123bfbe9575b69",
        "warmup_time": -1
    },
    "time_setup_models_and_sims.TimeBuildSPMSimulation.time_setup_SPM_simulation": {
        "code": "class TimeBuildSPMSimulation:\n    def time_setup_SPM_simulation(self, with_experiment, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.SPM()\n        if with_experiment:\n            exp = pybamm.Experiment(\n                [\n                    \"Discharge at 0.1C until 3.105 V\",\n                ]\n            )\n            pybamm.Simulation(self.model, parameter_values=self.param, experiment=exp)\n        else:\n            pybamm.Simulation(self.model, parameter_values=self.param, C_rate=1)",
        "min_run_count": 2,
        "name": "time_setup_models_and_sims.TimeBuildSPMSimulation.time_setup_SPM_simulation",
        "number": 0,
        "param_names": [
            "with experiment",
            "parameter"
        ],
        "params": [
            [
                "False",
                "True"
            ],
            [
                "'Marquis2019'",
                "'ORegan2021'",
                "'NCA_Kim2011'",
                "'Prada2013'",
                "'Ai2020'",
                "'Ramadass2004'",
                "'Mohtat2020'",
                "'Chen2020'",
                "'Chen2020_plating'",
                "'Ecker2015'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "dcc0e5a798b16647676f9beb1311bd07fcbd43b5f1445721dee62457345f84f0",
        "warmup_time": -1
    },
    "time_setup_models_and_sims.TimeBuildSPMe.time_setup_SPMe": {
        "code": "class TimeBuildSPMe:\n    def time_setup_SPMe(self, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.SPMe()\n        self.param.process_model(self.model)\n        compute_discretisation(self.model, self.param).process_model(self.model)",
        "min_run_count": 2,
        "name": "time_setup_models_and_sims.TimeBuildSPMe.time_setup_SPMe",
        "number": 0,
        "param_names": [
            "parameter"
        ],
        "params": [
            [
                "'Marquis2019'",
                "'ORegan2021'",
                "'NCA_Kim2011'",
                "'Prada2013'",
                "'Ai2020'",
                "'Ramadass2004'",
                "'Mohtat2020'",
                "'Chen2020'",
                "'Chen2020_plating'",
                "'Ecker2015'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "42f066a302b7c7c0b8678546b480bc896e28faa8487a3ada7570e4b587d592db",
        "warmup_time": -1
    },
    "time_setup_models_and_sims.TimeBuildSPMeSimulation.time_setup_SPMe_simulation": {
        "code": "class TimeBuildSPMeSimulation:\n    def time_setup_SPMe_simulation(self, with_experiment, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.SPMe()\n        if with_experiment:\n            exp = pybamm.Experiment(\n                [\n                    \"Discharge at 0.1C until 3.105 V\",\n                ]\n            )\n            pybamm.Simulation(self.model, parameter_values=self.param, experiment=exp)\n        else:\n            pybamm.Simulation(self.model, parameter_values=self.param, C_rate=1)",
        "min_run_count": 2,
        "name": "time_setup_models_and_sims.TimeBuildSPMeSimulation.time_setup_SPMe_simulation",
        "number": 0,
        "param_names": [
            "with experiment",
            "parameter"
        ],
        "params": [
            [
                "False",
                "True"
            ],
            [
                "'Marquis2019'",
                "'ORegan2021'",
                "'NCA_Kim2011'",
                "'Prada2013'",
                "'Ai2020'",
                "'Ramadass2004'",
                "'Mohtat2020'",
                "'Chen2020'",
                "'Chen2020_plating'",
                "'Ecker2015'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "fa33f32dc52b29c7d15644fc09b82fa83412d56629204948b3a5291eb4d299d7",
        "warmup_time": -1
    },
    "time_sims_experiments.TimeDFNSimulationCCCV.time_setup_SPM_simulation": {
        "code": "class TimeDFNSimulationCCCV:\n    def time_setup_SPM_simulation(self, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.DFN()\n        exp = pybamm.Experiment(\n            [\n                \"Discharge at C/5 for 10 hours or until 3.3 V\",\n                \"Rest for 1 hour\",\n                \"Charge at 1 A until 4.1 V\",\n                \"Hold at 4.1 V until 10 mA\",\n                \"Rest for 1 hour\",\n            ]\n        )\n        pybamm.Simulation(self.model, parameter_values=self.param, experiment=exp)",
        "min_run_count": 2,
        "name": "time_sims_experiments.TimeDFNSimulationCCCV.time_setup_SPM_simulation",
        "number": 0,
        "param_names": [
            "parameter"
        ],
        "params": [
            [
                "'Marquis2019'",
                "'Chen2020'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "7e4387abb5f304cc68a600e04d30ef7f12914faf5687f08ebcd6c2c62896729f",
        "warmup_time": -1
    },
    "time_sims_experiments.TimeDFNSimulationGITT.time_setup_SPM_simulation": {
        "code": "class TimeDFNSimulationGITT:\n    def time_setup_SPM_simulation(self, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.DFN()\n        exp = pybamm.Experiment(\n            [(\"Discharge at C/20 for 1 hour\", \"Rest for 1 hour\")] * 20\n        )\n        pybamm.Simulation(self.model, parameter_values=self.param, experiment=exp)",
        "min_run_count": 2,
        "name": "time_sims_experiments.TimeDFNSimulationGITT.time_setup_SPM_simulation",
        "number": 0,
        "param_names": [
            "parameter"
        ],
        "params": [
            [
                "'Marquis2019'",
                "'Chen2020'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "58732c51d255c37f8c0c77d0003f8f1f4cf0e570484caa9c291bb84c28141959",
        "warmup_time": -1
    },
    "time_sims_experiments.TimeSPMSimulationCCCV.time_setup_SPM_simulation": {
        "code": "class TimeSPMSimulationCCCV:\n    def time_setup_SPM_simulation(self, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.SPM()\n        exp = pybamm.Experiment(\n            [\n                \"Discharge at C/5 for 10 hours or until 3.3 V\",\n                \"Rest for 1 hour\",\n                \"Charge at 1 A until 4.1 V\",\n                \"Hold at 4.1 V until 10 mA\",\n                \"Rest for 1 hour\",\n            ]\n        )\n        pybamm.Simulation(self.model, parameter_values=self.param, experiment=exp)",
        "min_run_count": 2,
        "name": "time_sims_experiments.TimeSPMSimulationCCCV.time_setup_SPM_simulation",
        "number": 0,
        "param_names": [
            "parameter"
        ],
        "params": [
            [
                "'Marquis2019'",
                "'Chen2020'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8001bf4564507e1181c424495e2efd5bec0f190db2ab38cb2d451b73f7f08d29",
        "warmup_time": -1
    },
    "time_sims_experiments.TimeSPMSimulationGITT.time_setup_SPM_simulation": {
        "code": "class TimeSPMSimulationGITT:\n    def time_setup_SPM_simulation(self, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.SPM()\n        exp = pybamm.Experiment(\n            [(\"Discharge at C/20 for 1 hour\", \"Rest for 1 hour\")] * 20\n        )\n        pybamm.Simulation(self.model, parameter_values=self.param, experiment=exp)",
        "min_run_count": 2,
        "name": "time_sims_experiments.TimeSPMSimulationGITT.time_setup_SPM_simulation",
        "number": 0,
        "param_names": [
            "parameter"
        ],
        "params": [
            [
                "'Marquis2019'",
                "'Chen2020'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "4efc5d800e3e1f9f99ee0faf2d8d4fedde6e94844f8288b42f535ee4cea0e201",
        "warmup_time": -1
    },
    "time_solve_models.TimeSolveDFN.time_solve_model": {
        "code": "class TimeSolveDFN:\n    def time_solve_model(self, solve_first, parameters):\n        TimeSolveDFN.solver.solve(self.model, t_eval=self.t_eval)\n\n    def setup(self, solve_first, parameters):\n        self.model = pybamm.lithium_ion.DFN()\n        c_rate = 1\n        tmax = 4000 / c_rate\n        nb_points = 500\n        self.t_eval = np.linspace(0, tmax, nb_points)\n        geometry = self.model.default_geometry\n    \n        # load parameter values and process model and geometry\n        param = pybamm.ParameterValues(parameters)\n        param.process_model(self.model)\n        param.process_geometry(geometry)\n    \n        # set mesh\n        var_pts = {\n            \"x_n\": 20,\n            \"x_s\": 20,\n            \"x_p\": 20,\n            \"r_n\": 30,\n            \"r_p\": 30,\n            \"y\": 10,\n            \"z\": 10,\n        }\n        mesh = pybamm.Mesh(geometry, self.model.default_submesh_types, var_pts)\n    \n        # discretise model\n        disc = pybamm.Discretisation(mesh, self.model.default_spatial_methods)\n        disc.process_model(self.model)\n        if solve_first:\n            solve_model_once(self.model, TimeSolveDFN.solver, self.t_eval)",
        "min_run_count": 2,
        "name": "time_solve_models.TimeSolveDFN.time_solve_model",
        "number": 0,
        "param_names": [
            "solve first",
            "parameter"
        ],
        "params": [
            [
                "False",
                "True"
            ],
            [
                "'Marquis2019'",
                "'ORegan2021'",
                "'Prada2013'",
                "'Ai2020'",
                "'Ramadass2004'",
                "'Chen2020'",
                "'Chen2020_plating'",
                "'Ecker2015'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "3ff029f6adf4e390fcd37631c5425e0c03adfa7e8e95716a558ea7b55c51db50",
        "warmup_time": -1
    },
    "time_solve_models.TimeSolveSPM.time_solve_model": {
        "code": "class TimeSolveSPM:\n    def time_solve_model(self, solve_first, parameters):\n        TimeSolveSPM.solver.solve(self.model, t_eval=self.t_eval)\n\n    def setup(self, solve_first, parameters):\n        self.model = pybamm.lithium_ion.SPM()\n        c_rate = 1\n        tmax = 4000 / c_rate\n        nb_points = 500\n        self.t_eval = np.linspace(0, tmax, nb_points)\n        geometry = self.model.default_geometry\n    \n        # load parameter values and process model and geometry\n        param = pybamm.ParameterValues(parameters)\n        param.process_model(self.model)\n        param.process_geometry(geometry)\n    \n        # set mesh\n        var_pts = {\n            \"x_n\": 20,\n            \"x_s\": 20,\n            \"x_p\": 20,\n            \"r_n\": 30,\n            \"r_p\": 30,\n            \"y\": 10,\n            \"z\": 10,\n        }\n        mesh = pybamm.Mesh(geometry, self.model.default_submesh_types, var_pts)\n    \n        # discretise model\n        disc = pybamm.Discretisation(mesh, self.model.default_spatial_methods)\n        disc.process_model(self.model)\n        if solve_first:\n            solve_model_once(self.model, TimeSolveSPM.solver, self.t_eval)",
        "min_run_count": 2,
        "name": "time_solve_models.TimeSolveSPM.time_solve_model",
        "number": 0,
        "param_names": [
            "solve first",
            "parameter"
        ],
        "params": [
            [
                "False",
                "True"
            ],
            [
                "'Marquis2019'",
                "'ORegan2021'",
                "'NCA_Kim2011'",
                "'Prada2013'",
                "'Ramadass2004'",
                "'Mohtat2020'",
                "'Chen2020'",
                "'Chen2020_plating'",
                "'Ecker2015'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "69b39de79a797e3494d3a9dcc28565a5e445f32a08fbf809f39ccde835854b13",
        "warmup_time": -1
    },
    "time_solve_models.TimeSolveSPMe.time_solve_model": {
        "code": "class TimeSolveSPMe:\n    def time_solve_model(self, solve_first, parameters):\n        TimeSolveSPMe.solver.solve(self.model, t_eval=self.t_eval)\n\n    def setup(self, solve_first, parameters):\n        self.model = pybamm.lithium_ion.SPMe()\n        c_rate = 1\n        tmax = 4000 / c_rate\n        nb_points = 500\n        self.t_eval = np.linspace(0, tmax, nb_points)\n        geometry = self.model.default_geometry\n    \n        # load parameter values and process model and geometry\n        param = pybamm.ParameterValues(parameters)\n        param.process_model(self.model)\n        param.process_geometry(geometry)\n    \n        # set mesh\n        var_pts = {\n            \"x_n\": 20,\n            \"x_s\": 20,\n            \"x_p\": 20,\n            \"r_n\": 30,\n            \"r_p\": 30,\n            \"y\": 10,\n            \"z\": 10,\n        }\n        mesh = pybamm.Mesh(geometry, self.model.default_submesh_types, var_pts)\n    \n        # discretise model\n        disc = pybamm.Discretisation(mesh, self.model.default_spatial_methods)\n        disc.process_model(self.model)\n        if solve_first:\n            solve_model_once(self.model, TimeSolveSPMe.solver, self.t_eval)",
        "min_run_count": 2,
        "name": "time_solve_models.TimeSolveSPMe.time_solve_model",
        "number": 0,
        "param_names": [
            "solve first",
            "parameter"
        ],
        "params": [
            [
                "False",
                "True"
            ],
            [
                "'Marquis2019'",
                "'ORegan2021'",
                "'NCA_Kim2011'",
                "'Prada2013'",
                "'Ramadass2004'",
                "'Mohtat2020'",
                "'Chen2020'",
                "'Chen2020_plating'",
                "'Ecker2015'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "c9d4e016be902ab3ca8ca890b333d1a130170e5c33d92404ac0d9c6bc28a29b5",
        "warmup_time": -1
    },
    "unit_benchmarks.TimeCreateExpression.time_create_expression": {
        "code": "class TimeCreateExpression:\n    def time_create_expression(self):\n        self.R = pybamm.Parameter(\"Particle radius [m]\")\n        D = pybamm.Parameter(\"Diffusion coefficient [m2.s-1]\")\n        j = pybamm.Parameter(\"Interfacial current density [A.m-2]\")\n        F = pybamm.Parameter(\"Faraday constant [C.mol-1]\")\n        c0 = pybamm.Parameter(\"Initial concentration [mol.m-3]\")\n        self.model = pybamm.BaseModel()\n    \n        c = pybamm.Variable(\"Concentration [mol.m-3]\", domain=\"negative particle\")\n        N = -D * pybamm.grad(c)\n        dcdt = -pybamm.div(N)\n        self.model.rhs = {c: dcdt}\n    \n        lbc = pybamm.Scalar(0)\n        rbc = -j / F / D\n        self.model.boundary_conditions = {\n            c: {\"left\": (lbc, \"Neumann\"), \"right\": (rbc, \"Neumann\")}\n        }\n    \n        self.model.initial_conditions = {c: c0}\n        self.model.variables = {\n            \"Concentration [mol.m-3]\": c,\n            \"Surface concentration [mol.m-3]\": pybamm.surf(c),\n            \"Flux [mol.m-2.s-1]\": N,\n        }",
        "min_run_count": 2,
        "name": "unit_benchmarks.TimeCreateExpression.time_create_expression",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "d50f4d23b4da39a89763df3a16060d53690898d238986a03d1867d86fdd8baf6",
        "warmup_time": -1
    },
    "unit_benchmarks.TimeDiscretiseModel.time_discretise": {
        "code": "class TimeDiscretiseModel:\n    def time_discretise(self):\n        TimeCreateExpression.time_create_expression(self)\n        TimeParameteriseModel.time_parameterise(self)\n        submesh_types = {\"negative particle\": pybamm.Uniform1DSubMesh}\n        var_pts = {self.r: 20}\n        mesh = pybamm.Mesh(self.geometry, submesh_types, var_pts)\n    \n        spatial_methods = {\"negative particle\": pybamm.FiniteVolume()}\n        disc = pybamm.Discretisation(mesh, spatial_methods)\n        disc.process_model(self.model)\n\n    def setup(self):\n        TimeCreateExpression.time_create_expression(self)\n        TimeParameteriseModel.time_parameterise(self)",
        "min_run_count": 2,
        "name": "unit_benchmarks.TimeDiscretiseModel.time_discretise",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "4fbfe1ce99553daa3ea65f929308b968644f29f5a930c12c92505465fb85c788",
        "warmup_time": -1
    },
    "unit_benchmarks.TimeParameteriseModel.time_parameterise": {
        "code": "class TimeParameteriseModel:\n    def time_parameterise(self):\n        param = pybamm.ParameterValues(\n            {\n                \"Particle radius [m]\": 10e-6,\n                \"Diffusion coefficient [m2.s-1]\": 3.9e-14,\n                \"Interfacial current density [A.m-2]\": 1.4,\n                \"Faraday constant [C.mol-1]\": 96485,\n                \"Initial concentration [mol.m-3]\": 2.5e4,\n            }\n        )\n    \n        self.r = pybamm.SpatialVariable(\n            \"r\", domain=[\"negative particle\"], coord_sys=\"spherical polar\"\n        )\n    \n        self.geometry = {\n            \"negative particle\": {self.r: {\"min\": pybamm.Scalar(0), \"max\": self.R}}\n        }\n        param.process_model(self.model)\n        param.process_geometry(self.geometry)\n\n    def setup(self):\n        TimeCreateExpression.time_create_expression(self)",
        "min_run_count": 2,
        "name": "unit_benchmarks.TimeParameteriseModel.time_parameterise",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "58d52171a131f2e05d1ca3d07e0a65d958c048aa8fe7d01aa04959f95800017d",
        "warmup_time": -1
    },
    "unit_benchmarks.TimeSolveModel.time_solve": {
        "code": "class TimeSolveModel:\n    def time_solve(self):\n        solver = pybamm.ScipySolver()\n        t = np.linspace(0, 3600, 600)\n        solver.solve(self.model, t)\n\n    def setup(self):\n        TimeCreateExpression.time_create_expression(self)\n        TimeParameteriseModel.time_parameterise(self)\n        TimeDiscretiseModel.time_discretise(self)",
        "min_run_count": 2,
        "name": "unit_benchmarks.TimeSolveModel.time_solve",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "f55331e31db8421a38d5fc1cae40690d1af2dfe4dbbcfbbcf716519cf3ff2946",
        "warmup_time": -1
    },
    "version": 2
}