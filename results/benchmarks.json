{
    "time_setup_models_and_sims.TimeBuildDFN.time_setup_DFN": {
        "code": "class TimeBuildDFN:\n    def time_setup_DFN(self, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.DFN()\n        self.param.process_model(self.model)\n        compute_discretisation(self.model, self.param).process_model(self.model)",
        "min_run_count": 2,
        "name": "time_setup_models_and_sims.TimeBuildDFN.time_setup_DFN",
        "number": 0,
        "param_names": [
            "parameter"
        ],
        "params": [
            [
                "'Marquis2019'",
                "'ORegan2021'",
                "'NCA_Kim2011'",
                "'Prada2013'",
                "'Ai2020'",
                "'Ramadass2004'",
                "'Mohtat2020'",
                "'Chen2020'",
                "'Chen2020_plating'",
                "'Ecker2015'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "5294948f9d12b08e0ca91e872f066e08b04cc20a728431d490a7f389fb25d4cb",
        "warmup_time": -1
    },
    "time_setup_models_and_sims.TimeBuildDFNSimulation.time_setup_DFN_simulation": {
        "code": "class TimeBuildDFNSimulation:\n    def time_setup_DFN_simulation(self, with_experiment, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.DFN()\n        if with_experiment:\n            exp = pybamm.Experiment(\n                [\n                    \"Discharge at 0.1C until 3.105 V\",\n                ]\n            )\n            pybamm.Simulation(self.model, parameter_values=self.param, experiment=exp)\n        else:\n            pybamm.Simulation(self.model, parameter_values=self.param, C_rate=1)",
        "min_run_count": 2,
        "name": "time_setup_models_and_sims.TimeBuildDFNSimulation.time_setup_DFN_simulation",
        "number": 0,
        "param_names": [
            "with experiment",
            "parameter"
        ],
        "params": [
            [
                "False",
                "True"
            ],
            [
                "'Marquis2019'",
                "'ORegan2021'",
                "'NCA_Kim2011'",
                "'Prada2013'",
                "'Ai2020'",
                "'Ramadass2004'",
                "'Mohtat2020'",
                "'Chen2020'",
                "'Chen2020_plating'",
                "'Ecker2015'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "bec1ef0368e5b10eb69f23a0228764e22ba74a9ce379a2d632fe081d9b554772",
        "warmup_time": -1
    },
    "time_setup_models_and_sims.TimeBuildSPM.time_setup_SPM": {
        "code": "class TimeBuildSPM:\n    def time_setup_SPM(self, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.SPM()\n        self.param.process_model(self.model)\n        compute_discretisation(self.model, self.param).process_model(self.model)",
        "min_run_count": 2,
        "name": "time_setup_models_and_sims.TimeBuildSPM.time_setup_SPM",
        "number": 0,
        "param_names": [
            "parameter"
        ],
        "params": [
            [
                "'Marquis2019'",
                "'ORegan2021'",
                "'NCA_Kim2011'",
                "'Prada2013'",
                "'Ai2020'",
                "'Ramadass2004'",
                "'Mohtat2020'",
                "'Chen2020'",
                "'Chen2020_plating'",
                "'Ecker2015'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9cc0fc69309859c6bf4b82d51013e8fe94dd813b79bac34773123bfbe9575b69",
        "warmup_time": -1
    },
    "time_setup_models_and_sims.TimeBuildSPMSimulation.time_setup_SPM_simulation": {
        "code": "class TimeBuildSPMSimulation:\n    def time_setup_SPM_simulation(self, with_experiment, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.SPM()\n        if with_experiment:\n            exp = pybamm.Experiment(\n                [\n                    \"Discharge at 0.1C until 3.105 V\",\n                ]\n            )\n            pybamm.Simulation(self.model, parameter_values=self.param, experiment=exp)\n        else:\n            pybamm.Simulation(self.model, parameter_values=self.param, C_rate=1)",
        "min_run_count": 2,
        "name": "time_setup_models_and_sims.TimeBuildSPMSimulation.time_setup_SPM_simulation",
        "number": 0,
        "param_names": [
            "with experiment",
            "parameter"
        ],
        "params": [
            [
                "False",
                "True"
            ],
            [
                "'Marquis2019'",
                "'ORegan2021'",
                "'NCA_Kim2011'",
                "'Prada2013'",
                "'Ai2020'",
                "'Ramadass2004'",
                "'Mohtat2020'",
                "'Chen2020'",
                "'Chen2020_plating'",
                "'Ecker2015'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "dcc0e5a798b16647676f9beb1311bd07fcbd43b5f1445721dee62457345f84f0",
        "warmup_time": -1
    },
    "time_setup_models_and_sims.TimeBuildSPMe.time_setup_SPMe": {
        "code": "class TimeBuildSPMe:\n    def time_setup_SPMe(self, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.SPMe()\n        self.param.process_model(self.model)\n        compute_discretisation(self.model, self.param).process_model(self.model)",
        "min_run_count": 2,
        "name": "time_setup_models_and_sims.TimeBuildSPMe.time_setup_SPMe",
        "number": 0,
        "param_names": [
            "parameter"
        ],
        "params": [
            [
                "'Marquis2019'",
                "'ORegan2021'",
                "'NCA_Kim2011'",
                "'Prada2013'",
                "'Ai2020'",
                "'Ramadass2004'",
                "'Mohtat2020'",
                "'Chen2020'",
                "'Chen2020_plating'",
                "'Ecker2015'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "42f066a302b7c7c0b8678546b480bc896e28faa8487a3ada7570e4b587d592db",
        "warmup_time": -1
    },
    "time_setup_models_and_sims.TimeBuildSPMeSimulation.time_setup_SPMe_simulation": {
        "code": "class TimeBuildSPMeSimulation:\n    def time_setup_SPMe_simulation(self, with_experiment, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.SPMe()\n        if with_experiment:\n            exp = pybamm.Experiment(\n                [\n                    \"Discharge at 0.1C until 3.105 V\",\n                ]\n            )\n            pybamm.Simulation(self.model, parameter_values=self.param, experiment=exp)\n        else:\n            pybamm.Simulation(self.model, parameter_values=self.param, C_rate=1)",
        "min_run_count": 2,
        "name": "time_setup_models_and_sims.TimeBuildSPMeSimulation.time_setup_SPMe_simulation",
        "number": 0,
        "param_names": [
            "with experiment",
            "parameter"
        ],
        "params": [
            [
                "False",
                "True"
            ],
            [
                "'Marquis2019'",
                "'ORegan2021'",
                "'NCA_Kim2011'",
                "'Prada2013'",
                "'Ai2020'",
                "'Ramadass2004'",
                "'Mohtat2020'",
                "'Chen2020'",
                "'Chen2020_plating'",
                "'Ecker2015'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "fa33f32dc52b29c7d15644fc09b82fa83412d56629204948b3a5291eb4d299d7",
        "warmup_time": -1
    },
    "time_solve_models.TimeSolveDFN.time_solve_model": {
        "code": "class TimeSolveDFN:\n    def time_solve_model(self, solve_first, parameters):\n        TimeSolveDFN.solver.solve(self.model, t_eval=self.t_eval)\n\n    def setup(self, solve_first, parameters):\n        self.model = pybamm.lithium_ion.DFN()\n        c_rate = 1\n        tmax = 4000 / c_rate\n        nb_points = 500\n        self.t_eval = np.linspace(0, tmax, nb_points)\n        geometry = self.model.default_geometry\n    \n        # load parameter values and process model and geometry\n        param = pybamm.ParameterValues(parameters)\n        param.process_model(self.model)\n        param.process_geometry(geometry)\n    \n        # set mesh\n        var_pts = {\n            \"x_n\": 20,\n            \"x_s\": 20,\n            \"x_p\": 20,\n            \"r_n\": 30,\n            \"r_p\": 30,\n            \"y\": 10,\n            \"z\": 10,\n        }\n        mesh = pybamm.Mesh(geometry, self.model.default_submesh_types, var_pts)\n    \n        # discretise model\n        disc = pybamm.Discretisation(mesh, self.model.default_spatial_methods)\n        disc.process_model(self.model)\n        if solve_first:\n            solve_model_once(self.model, TimeSolveDFN.solver, self.t_eval)",
        "min_run_count": 2,
        "name": "time_solve_models.TimeSolveDFN.time_solve_model",
        "number": 0,
        "param_names": [
            "solve first",
            "parameter"
        ],
        "params": [
            [
                "False",
                "True"
            ],
            [
                "'Marquis2019'",
                "'ORegan2021'",
                "'Prada2013'",
                "'Ai2020'",
                "'Ramadass2004'",
                "'Chen2020'",
                "'Chen2020_plating'",
                "'Ecker2015'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "3ff029f6adf4e390fcd37631c5425e0c03adfa7e8e95716a558ea7b55c51db50",
        "warmup_time": -1
    },
    "time_solve_models.TimeSolveSPM.time_solve_model": {
        "code": "class TimeSolveSPM:\n    def time_solve_model(self, solve_first, parameters):\n        TimeSolveSPM.solver.solve(self.model, t_eval=self.t_eval)\n\n    def setup(self, solve_first, parameters):\n        self.model = pybamm.lithium_ion.SPM()\n        c_rate = 1\n        tmax = 4000 / c_rate\n        nb_points = 500\n        self.t_eval = np.linspace(0, tmax, nb_points)\n        geometry = self.model.default_geometry\n    \n        # load parameter values and process model and geometry\n        param = pybamm.ParameterValues(parameters)\n        param.process_model(self.model)\n        param.process_geometry(geometry)\n    \n        # set mesh\n        var_pts = {\n            \"x_n\": 20,\n            \"x_s\": 20,\n            \"x_p\": 20,\n            \"r_n\": 30,\n            \"r_p\": 30,\n            \"y\": 10,\n            \"z\": 10,\n        }\n        mesh = pybamm.Mesh(geometry, self.model.default_submesh_types, var_pts)\n    \n        # discretise model\n        disc = pybamm.Discretisation(mesh, self.model.default_spatial_methods)\n        disc.process_model(self.model)\n        if solve_first:\n            solve_model_once(self.model, TimeSolveSPM.solver, self.t_eval)",
        "min_run_count": 2,
        "name": "time_solve_models.TimeSolveSPM.time_solve_model",
        "number": 0,
        "param_names": [
            "solve first",
            "parameter"
        ],
        "params": [
            [
                "False",
                "True"
            ],
            [
                "'Marquis2019'",
                "'ORegan2021'",
                "'NCA_Kim2011'",
                "'Prada2013'",
                "'Ramadass2004'",
                "'Mohtat2020'",
                "'Chen2020'",
                "'Chen2020_plating'",
                "'Ecker2015'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "69b39de79a797e3494d3a9dcc28565a5e445f32a08fbf809f39ccde835854b13",
        "warmup_time": -1
    },
    "time_solve_models.TimeSolveSPMe.time_solve_model": {
        "code": "class TimeSolveSPMe:\n    def time_solve_model(self, solve_first, parameters):\n        TimeSolveSPMe.solver.solve(self.model, t_eval=self.t_eval)\n\n    def setup(self, solve_first, parameters):\n        self.model = pybamm.lithium_ion.SPMe()\n        c_rate = 1\n        tmax = 4000 / c_rate\n        nb_points = 500\n        self.t_eval = np.linspace(0, tmax, nb_points)\n        geometry = self.model.default_geometry\n    \n        # load parameter values and process model and geometry\n        param = pybamm.ParameterValues(parameters)\n        param.process_model(self.model)\n        param.process_geometry(geometry)\n    \n        # set mesh\n        var_pts = {\n            \"x_n\": 20,\n            \"x_s\": 20,\n            \"x_p\": 20,\n            \"r_n\": 30,\n            \"r_p\": 30,\n            \"y\": 10,\n            \"z\": 10,\n        }\n        mesh = pybamm.Mesh(geometry, self.model.default_submesh_types, var_pts)\n    \n        # discretise model\n        disc = pybamm.Discretisation(mesh, self.model.default_spatial_methods)\n        disc.process_model(self.model)\n        if solve_first:\n            solve_model_once(self.model, TimeSolveSPMe.solver, self.t_eval)",
        "min_run_count": 2,
        "name": "time_solve_models.TimeSolveSPMe.time_solve_model",
        "number": 0,
        "param_names": [
            "solve first",
            "parameter"
        ],
        "params": [
            [
                "False",
                "True"
            ],
            [
                "'Marquis2019'",
                "'ORegan2021'",
                "'NCA_Kim2011'",
                "'Prada2013'",
                "'Ramadass2004'",
                "'Mohtat2020'",
                "'Chen2020'",
                "'Chen2020_plating'",
                "'Ecker2015'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "c9d4e016be902ab3ca8ca890b333d1a130170e5c33d92404ac0d9c6bc28a29b5",
        "warmup_time": -1
    },
    "version": 2
}