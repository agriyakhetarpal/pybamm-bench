{"project": "PyBaMM", "project_url": "https://www.pybamm.org/", "show_commit_url": "#", "hash_length": 8, "revision_to_hash": {"3643": "8afc8f94f75b6f0b51928f43819f9894d2b91020", "5009": "801492b250a6637554d99a4662a0d85c3354ceea", "5355": "105714c9748f7c7f3824411240ab583ac6c4973a", "6071": "eff587b12cd3e41b911c4665909f3d4ab8a8f50f", "6518": "09a3c082833f876bd5f4962306340886d29fa116", "6881": "f00b8d11ec0c4169c53d6fb1e0cd58e71009e924", "7377": "e408c41c6c3c432da7fc9a49263e4fc3b454ca45", "7440": "d1d6af04c5083b6c413fe30b1af4f4add1b222e3", "8501": "0a99ea46b37bedd729f75d8d1e101122c27bb6d8", "8775": "f6cb07aa40ec406ba9eba3f90c09ccf0c5feb539", "9028": "c0a7f58f23bff963de63804011f79cbdb5ca43db", "9278": "00a93578a1e270876ea13e89dc2568dbc1a50b86", "9307": "c4ba93ffe27597c18ff1848d644d6585601e30d5", "9438": "463677471462d93e2fe1f7b7444820dc22689c30", "9479": "c737eacae81da8565fb35711260c95791a56cc54", "9559": "3a120d766fdd87b3a7f9212920c0d6d68544832f", "9593": "aa8be739b0219304dd2e933c02c82651831cfa9b", "9780": "d69db284eed874fd7b066e57db4259d0fee98fe6", "9957": "15992b32d969323f038c789340c87c2254354e55", "10054": "85c66a739896bcb678be58583ebcfac22e426004", "10102": "7f4bf8765621c462fabadb33734142062b51bfee", "10277": "7f3a4bbf124e0ad9c4c911db708d4467987c7fe0", "10312": "0216c382873fad07014f9acddda67e774c3a1c74", "10323": "3d55351e27809534dedde46e10df0e499f586137", "10339": "bc791566091507b286d02ee5936a414373086b54", "10342": "214a4b1e8fc5da6dc42211572454f31671ac1af2", "10346": "2e04ddd51941d01ea95835a7aa957ff9785fb9e9", "10351": "24161dfd5d628847dbf91d1c9b12166a6e62d980", "10366": "fa15226dde16f66a7c732ae31fed8dbee1b23e3a", "10371": "233d476f74f09b119ee7ac4765efe9b751d0a134", "10380": "5473db5678702d2942478280cc3b51540d6edaf6", "10404": "fb76610f4a4cbf7305d54bdbfa81eaac8377b392", "10420": "7cca539cb95f2556f99658f6fb97338979459851", "10432": "795a0c08151859b5e0e5ec9d99ff44c2dcf668d0", "10442": "804ea24742bddd9267d0b0a2148779e9ef420b91", "10451": "524839d1ccb48835019edb898bdcc648eeaadb7b", "10458": "979d14b4846e4d3dbf3a49a7ec32ab50422e917e", "10461": "e485a0117aad693d96a6d520d0a9370f254e1430", "10474": "d0b5beb2fb80a8a17ad71a9e843cc838e075c79f", "10481": "23157aebce218444edc83b525dfb2c7fc8637598", "10494": "dd0d4b532c49b73bf77224f38cd3c6101c819068", "10522": "5643116d5b8bd2622c13879d09b07d9952714c5b", "10529": "9eea12b9b0813ac3c7e269c4c74b54d5240b7f67", "10547": "e4bd6c12f05823750ada4f8056879d6406831347", "10565": "3b8d775505186f70994b40512be7e94c9eb7bcc1", "10646": "309ba7280ae3de3b9ea9426424ae08001d1488e3", "10654": "a8ad2d66705c930431de5b61f38959725935c311", "10665": "7fd51553d41359e17a111c9d02497f1ee7d12f72", "10672": "e992f1202b571d5fb9de729bf71ccb968db786f7", "10679": "134585fb5cc5604f046ec30d1e9d622588d82e89", "10697": "f649e6adf2072d5bdec0fb12402eb2e3f379bdf0", "10707": "0ce0a71364be6e301c3d4379d4e0b0e601d690bb", "10712": "2c74a4f86797e707a8f205c6482233fb5aa34dd8", "10721": "e1f52ffcf9811bb7d5046af47c48a2291bfd50b8", "10742": "79b9368de9341b893378ddb20651a5e5c7ba5597", "10745": "bc72c6d4cb430eb8ec8a83323a996fc87b5297c7", "10753": "23d31f98a19194ba2eb0c415dab3fb55db509486", "10759": "754fc18db2325a598650a6781df35529383b5a70", "10761": "9d3b1c3c39644289e877088db842fb29c44cc4e3", "10771": "d0f8f35f7fea4d8f2aef9d06a5117ce8bcf81bb1", "10780": "9ec6ebcbc641379826ad46913cf33f3b4c3f5cf1"}, "revision_to_date": {"3643": 1570093702000, "5009": 1582740136000, "5355": 1585676155000, "6071": 1591033902000, "6518": 1593631560000, "6881": 1599491896000, "7377": 1606088199000, "7440": 1606841582000, "8501": 1617010666000, "8775": 1623191999000, "9028": 1627560622000, "9278": 1629941483000, "9307": 1630512171000, "9438": 1632146150000, "9479": 1633361655000, "9559": 1635177742000, "9593": 1635717739000, "9780": 1636835649000, "9957": 1638296811000, "10054": 1639518516000, "10102": 1640969974000, "10277": 1643639908000, "10312": 1643925156000, "10323": 1644089700000, "10339": 1644349796000, "10342": 1644502545000, "10346": 1645566656000, "10351": 1645740856000, "10366": 1646061111000, "10371": 1646125361000, "10380": 1646247845000, "10404": 1646755470000, "10420": 1646873103000, "10432": 1646931876000, "10442": 1647006111000, "10451": 1647179848000, "10458": 1647266364000, "10461": 1647343999000, "10474": 1647632702000, "10481": 1647978831000, "10494": 1648568226000, "10522": 1649954862000, "10529": 1650485426000, "10547": 1651062961000, "10565": 1651510060000, "10646": 1652061084000, "10654": 1652279780000, "10665": 1652430863000, "10672": 1652807866000, "10679": 1652970416000, "10697": 1653420634000, "10707": 1653606749000, "10712": 1653677328000, "10721": 1653925577000, "10742": 1654598015000, "10745": 1654603577000, "10753": 1654719862000, "10759": 1654785090000, "10761": 1655145895000, "10771": 1655308368000, "10780": 1655400342000}, "params": {"machine": ["GitHubRunner"], "python": ["3.8"], "branch": ["develop"]}, "graph_param_list": [{"machine": "GitHubRunner", "python": "3.8", "branch": "develop"}], "benchmarks": {"time_setup_models_and_sims.TimeBuildDFN.time_setup_DFN": {"code": "class TimeBuildDFN:\n    def time_setup_DFN(self, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.DFN()\n        self.param.process_model(self.model)\n        compute_discretisation(self.model, self.param).process_model(self.model)", "min_run_count": 2, "name": "time_setup_models_and_sims.TimeBuildDFN.time_setup_DFN", "number": 0, "param_names": ["parameter"], "params": [["'Marquis2019'", "'ORegan2021'", "'NCA_Kim2011'", "'Prada2013'", "'Ai2020'", "'Ramadass2004'", "'Mohtat2020'", "'Chen2020'", "'Chen2020_plating'", "'Ecker2015'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5294948f9d12b08e0ca91e872f066e08b04cc20a728431d490a7f389fb25d4cb", "warmup_time": -1}, "time_setup_models_and_sims.TimeBuildDFNSimulation.time_setup_DFN_simulation": {"code": "class TimeBuildDFNSimulation:\n    def time_setup_DFN_simulation(self, with_experiment, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.DFN()\n        if with_experiment:\n            exp = pybamm.Experiment(\n                [\n                    \"Discharge at 0.1C until 3.105 V\",\n                ]\n            )\n            pybamm.Simulation(self.model, parameter_values=self.param, experiment=exp)\n        else:\n            pybamm.Simulation(self.model, parameter_values=self.param, C_rate=1)", "min_run_count": 2, "name": "time_setup_models_and_sims.TimeBuildDFNSimulation.time_setup_DFN_simulation", "number": 0, "param_names": ["with experiment", "parameter"], "params": [["False", "True"], ["'Marquis2019'", "'ORegan2021'", "'NCA_Kim2011'", "'Prada2013'", "'Ai2020'", "'Ramadass2004'", "'Mohtat2020'", "'Chen2020'", "'Chen2020_plating'", "'Ecker2015'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "bec1ef0368e5b10eb69f23a0228764e22ba74a9ce379a2d632fe081d9b554772", "warmup_time": -1}, "time_setup_models_and_sims.TimeBuildSPM.time_setup_SPM": {"code": "class TimeBuildSPM:\n    def time_setup_SPM(self, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.SPM()\n        self.param.process_model(self.model)\n        compute_discretisation(self.model, self.param).process_model(self.model)", "min_run_count": 2, "name": "time_setup_models_and_sims.TimeBuildSPM.time_setup_SPM", "number": 0, "param_names": ["parameter"], "params": [["'Marquis2019'", "'ORegan2021'", "'NCA_Kim2011'", "'Prada2013'", "'Ai2020'", "'Ramadass2004'", "'Mohtat2020'", "'Chen2020'", "'Chen2020_plating'", "'Ecker2015'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9cc0fc69309859c6bf4b82d51013e8fe94dd813b79bac34773123bfbe9575b69", "warmup_time": -1}, "time_setup_models_and_sims.TimeBuildSPMSimulation.time_setup_SPM_simulation": {"code": "class TimeBuildSPMSimulation:\n    def time_setup_SPM_simulation(self, with_experiment, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.SPM()\n        if with_experiment:\n            exp = pybamm.Experiment(\n                [\n                    \"Discharge at 0.1C until 3.105 V\",\n                ]\n            )\n            pybamm.Simulation(self.model, parameter_values=self.param, experiment=exp)\n        else:\n            pybamm.Simulation(self.model, parameter_values=self.param, C_rate=1)", "min_run_count": 2, "name": "time_setup_models_and_sims.TimeBuildSPMSimulation.time_setup_SPM_simulation", "number": 0, "param_names": ["with experiment", "parameter"], "params": [["False", "True"], ["'Marquis2019'", "'ORegan2021'", "'NCA_Kim2011'", "'Prada2013'", "'Ai2020'", "'Ramadass2004'", "'Mohtat2020'", "'Chen2020'", "'Chen2020_plating'", "'Ecker2015'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "dcc0e5a798b16647676f9beb1311bd07fcbd43b5f1445721dee62457345f84f0", "warmup_time": -1}, "time_setup_models_and_sims.TimeBuildSPMe.time_setup_SPMe": {"code": "class TimeBuildSPMe:\n    def time_setup_SPMe(self, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.SPMe()\n        self.param.process_model(self.model)\n        compute_discretisation(self.model, self.param).process_model(self.model)", "min_run_count": 2, "name": "time_setup_models_and_sims.TimeBuildSPMe.time_setup_SPMe", "number": 0, "param_names": ["parameter"], "params": [["'Marquis2019'", "'ORegan2021'", "'NCA_Kim2011'", "'Prada2013'", "'Ai2020'", "'Ramadass2004'", "'Mohtat2020'", "'Chen2020'", "'Chen2020_plating'", "'Ecker2015'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "42f066a302b7c7c0b8678546b480bc896e28faa8487a3ada7570e4b587d592db", "warmup_time": -1}, "time_setup_models_and_sims.TimeBuildSPMeSimulation.time_setup_SPMe_simulation": {"code": "class TimeBuildSPMeSimulation:\n    def time_setup_SPMe_simulation(self, with_experiment, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.SPMe()\n        if with_experiment:\n            exp = pybamm.Experiment(\n                [\n                    \"Discharge at 0.1C until 3.105 V\",\n                ]\n            )\n            pybamm.Simulation(self.model, parameter_values=self.param, experiment=exp)\n        else:\n            pybamm.Simulation(self.model, parameter_values=self.param, C_rate=1)", "min_run_count": 2, "name": "time_setup_models_and_sims.TimeBuildSPMeSimulation.time_setup_SPMe_simulation", "number": 0, "param_names": ["with experiment", "parameter"], "params": [["False", "True"], ["'Marquis2019'", "'ORegan2021'", "'NCA_Kim2011'", "'Prada2013'", "'Ai2020'", "'Ramadass2004'", "'Mohtat2020'", "'Chen2020'", "'Chen2020_plating'", "'Ecker2015'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "fa33f32dc52b29c7d15644fc09b82fa83412d56629204948b3a5291eb4d299d7", "warmup_time": -1}, "time_sims_experiments.TimeDFNSimulationCCCV.time_setup_SPM_simulation": {"code": "class TimeDFNSimulationCCCV:\n    def time_setup_SPM_simulation(self, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.DFN()\n        exp = pybamm.Experiment(\n            [\n                \"Discharge at C/5 for 10 hours or until 3.3 V\",\n                \"Rest for 1 hour\",\n                \"Charge at 1 A until 4.1 V\",\n                \"Hold at 4.1 V until 10 mA\",\n                \"Rest for 1 hour\",\n            ]\n        )\n        pybamm.Simulation(self.model, parameter_values=self.param, experiment=exp)", "min_run_count": 2, "name": "time_sims_experiments.TimeDFNSimulationCCCV.time_setup_SPM_simulation", "number": 0, "param_names": ["parameter"], "params": [["'Marquis2019'", "'Chen2020'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7e4387abb5f304cc68a600e04d30ef7f12914faf5687f08ebcd6c2c62896729f", "warmup_time": -1}, "time_sims_experiments.TimeDFNSimulationGITT.time_setup_SPM_simulation": {"code": "class TimeDFNSimulationGITT:\n    def time_setup_SPM_simulation(self, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.DFN()\n        exp = pybamm.Experiment(\n            [(\"Discharge at C/20 for 1 hour\", \"Rest for 1 hour\")] * 20\n        )\n        pybamm.Simulation(self.model, parameter_values=self.param, experiment=exp)", "min_run_count": 2, "name": "time_sims_experiments.TimeDFNSimulationGITT.time_setup_SPM_simulation", "number": 0, "param_names": ["parameter"], "params": [["'Marquis2019'", "'Chen2020'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "58732c51d255c37f8c0c77d0003f8f1f4cf0e570484caa9c291bb84c28141959", "warmup_time": -1}, "time_sims_experiments.TimeSPMSimulationCCCV.time_setup_SPM_simulation": {"code": "class TimeSPMSimulationCCCV:\n    def time_setup_SPM_simulation(self, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.SPM()\n        exp = pybamm.Experiment(\n            [\n                \"Discharge at C/5 for 10 hours or until 3.3 V\",\n                \"Rest for 1 hour\",\n                \"Charge at 1 A until 4.1 V\",\n                \"Hold at 4.1 V until 10 mA\",\n                \"Rest for 1 hour\",\n            ]\n        )\n        pybamm.Simulation(self.model, parameter_values=self.param, experiment=exp)", "min_run_count": 2, "name": "time_sims_experiments.TimeSPMSimulationCCCV.time_setup_SPM_simulation", "number": 0, "param_names": ["parameter"], "params": [["'Marquis2019'", "'Chen2020'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8001bf4564507e1181c424495e2efd5bec0f190db2ab38cb2d451b73f7f08d29", "warmup_time": -1}, "time_sims_experiments.TimeSPMSimulationGITT.time_setup_SPM_simulation": {"code": "class TimeSPMSimulationGITT:\n    def time_setup_SPM_simulation(self, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.SPM()\n        exp = pybamm.Experiment(\n            [(\"Discharge at C/20 for 1 hour\", \"Rest for 1 hour\")] * 20\n        )\n        pybamm.Simulation(self.model, parameter_values=self.param, experiment=exp)", "min_run_count": 2, "name": "time_sims_experiments.TimeSPMSimulationGITT.time_setup_SPM_simulation", "number": 0, "param_names": ["parameter"], "params": [["'Marquis2019'", "'Chen2020'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4efc5d800e3e1f9f99ee0faf2d8d4fedde6e94844f8288b42f535ee4cea0e201", "warmup_time": -1}, "time_solve_models.TimeSolveDFN.time_solve_model": {"code": "class TimeSolveDFN:\n    def time_solve_model(self, solve_first, parameters):\n        TimeSolveDFN.solver.solve(self.model, t_eval=self.t_eval)\n\n    def setup(self, solve_first, parameters):\n        self.model = pybamm.lithium_ion.DFN()\n        c_rate = 1\n        tmax = 4000 / c_rate\n        nb_points = 500\n        self.t_eval = np.linspace(0, tmax, nb_points)\n        geometry = self.model.default_geometry\n    \n        # load parameter values and process model and geometry\n        param = pybamm.ParameterValues(parameters)\n        param.process_model(self.model)\n        param.process_geometry(geometry)\n    \n        # set mesh\n        var_pts = {\n            \"x_n\": 20,\n            \"x_s\": 20,\n            \"x_p\": 20,\n            \"r_n\": 30,\n            \"r_p\": 30,\n            \"y\": 10,\n            \"z\": 10,\n        }\n        mesh = pybamm.Mesh(geometry, self.model.default_submesh_types, var_pts)\n    \n        # discretise model\n        disc = pybamm.Discretisation(mesh, self.model.default_spatial_methods)\n        disc.process_model(self.model)\n        if solve_first:\n            solve_model_once(self.model, TimeSolveDFN.solver, self.t_eval)", "min_run_count": 2, "name": "time_solve_models.TimeSolveDFN.time_solve_model", "number": 0, "param_names": ["solve first", "parameter"], "params": [["False", "True"], ["'Marquis2019'", "'ORegan2021'", "'Prada2013'", "'Ai2020'", "'Ramadass2004'", "'Chen2020'", "'Chen2020_plating'", "'Ecker2015'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3ff029f6adf4e390fcd37631c5425e0c03adfa7e8e95716a558ea7b55c51db50", "warmup_time": -1}, "time_solve_models.TimeSolveSPM.time_solve_model": {"code": "class TimeSolveSPM:\n    def time_solve_model(self, solve_first, parameters):\n        TimeSolveSPM.solver.solve(self.model, t_eval=self.t_eval)\n\n    def setup(self, solve_first, parameters):\n        self.model = pybamm.lithium_ion.SPM()\n        c_rate = 1\n        tmax = 4000 / c_rate\n        nb_points = 500\n        self.t_eval = np.linspace(0, tmax, nb_points)\n        geometry = self.model.default_geometry\n    \n        # load parameter values and process model and geometry\n        param = pybamm.ParameterValues(parameters)\n        param.process_model(self.model)\n        param.process_geometry(geometry)\n    \n        # set mesh\n        var_pts = {\n            \"x_n\": 20,\n            \"x_s\": 20,\n            \"x_p\": 20,\n            \"r_n\": 30,\n            \"r_p\": 30,\n            \"y\": 10,\n            \"z\": 10,\n        }\n        mesh = pybamm.Mesh(geometry, self.model.default_submesh_types, var_pts)\n    \n        # discretise model\n        disc = pybamm.Discretisation(mesh, self.model.default_spatial_methods)\n        disc.process_model(self.model)\n        if solve_first:\n            solve_model_once(self.model, TimeSolveSPM.solver, self.t_eval)", "min_run_count": 2, "name": "time_solve_models.TimeSolveSPM.time_solve_model", "number": 0, "param_names": ["solve first", "parameter"], "params": [["False", "True"], ["'Marquis2019'", "'ORegan2021'", "'NCA_Kim2011'", "'Prada2013'", "'Ramadass2004'", "'Mohtat2020'", "'Chen2020'", "'Chen2020_plating'", "'Ecker2015'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "69b39de79a797e3494d3a9dcc28565a5e445f32a08fbf809f39ccde835854b13", "warmup_time": -1}, "time_solve_models.TimeSolveSPMe.time_solve_model": {"code": "class TimeSolveSPMe:\n    def time_solve_model(self, solve_first, parameters):\n        TimeSolveSPMe.solver.solve(self.model, t_eval=self.t_eval)\n\n    def setup(self, solve_first, parameters):\n        self.model = pybamm.lithium_ion.SPMe()\n        c_rate = 1\n        tmax = 4000 / c_rate\n        nb_points = 500\n        self.t_eval = np.linspace(0, tmax, nb_points)\n        geometry = self.model.default_geometry\n    \n        # load parameter values and process model and geometry\n        param = pybamm.ParameterValues(parameters)\n        param.process_model(self.model)\n        param.process_geometry(geometry)\n    \n        # set mesh\n        var_pts = {\n            \"x_n\": 20,\n            \"x_s\": 20,\n            \"x_p\": 20,\n            \"r_n\": 30,\n            \"r_p\": 30,\n            \"y\": 10,\n            \"z\": 10,\n        }\n        mesh = pybamm.Mesh(geometry, self.model.default_submesh_types, var_pts)\n    \n        # discretise model\n        disc = pybamm.Discretisation(mesh, self.model.default_spatial_methods)\n        disc.process_model(self.model)\n        if solve_first:\n            solve_model_once(self.model, TimeSolveSPMe.solver, self.t_eval)", "min_run_count": 2, "name": "time_solve_models.TimeSolveSPMe.time_solve_model", "number": 0, "param_names": ["solve first", "parameter"], "params": [["False", "True"], ["'Marquis2019'", "'ORegan2021'", "'NCA_Kim2011'", "'Prada2013'", "'Ramadass2004'", "'Mohtat2020'", "'Chen2020'", "'Chen2020_plating'", "'Ecker2015'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c9d4e016be902ab3ca8ca890b333d1a130170e5c33d92404ac0d9c6bc28a29b5", "warmup_time": -1}, "unit_benchmarks.TimeCreateExpression.time_create_expression": {"code": "class TimeCreateExpression:\n    def time_create_expression(self):\n        self.R = pybamm.Parameter(\"Particle radius [m]\")\n        D = pybamm.Parameter(\"Diffusion coefficient [m2.s-1]\")\n        j = pybamm.Parameter(\"Interfacial current density [A.m-2]\")\n        F = pybamm.Parameter(\"Faraday constant [C.mol-1]\")\n        c0 = pybamm.Parameter(\"Initial concentration [mol.m-3]\")\n        self.model = pybamm.BaseModel()\n    \n        c = pybamm.Variable(\"Concentration [mol.m-3]\", domain=\"negative particle\")\n        N = -D * pybamm.grad(c)\n        dcdt = -pybamm.div(N)\n        self.model.rhs = {c: dcdt}\n    \n        lbc = pybamm.Scalar(0)\n        rbc = -j / F / D\n        self.model.boundary_conditions = {\n            c: {\"left\": (lbc, \"Neumann\"), \"right\": (rbc, \"Neumann\")}\n        }\n    \n        self.model.initial_conditions = {c: c0}\n        self.model.variables = {\n            \"Concentration [mol.m-3]\": c,\n            \"Surface concentration [mol.m-3]\": pybamm.surf(c),\n            \"Flux [mol.m-2.s-1]\": N,\n        }", "min_run_count": 2, "name": "unit_benchmarks.TimeCreateExpression.time_create_expression", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d50f4d23b4da39a89763df3a16060d53690898d238986a03d1867d86fdd8baf6", "warmup_time": -1}, "unit_benchmarks.TimeDiscretiseModel.time_discretise": {"code": "class TimeDiscretiseModel:\n    def time_discretise(self):\n        TimeCreateExpression.time_create_expression(self)\n        TimeParameteriseModel.time_parameterise(self)\n        submesh_types = {\"negative particle\": pybamm.Uniform1DSubMesh}\n        var_pts = {self.r: 20}\n        mesh = pybamm.Mesh(self.geometry, submesh_types, var_pts)\n    \n        spatial_methods = {\"negative particle\": pybamm.FiniteVolume()}\n        disc = pybamm.Discretisation(mesh, spatial_methods)\n        disc.process_model(self.model)\n\n    def setup(self):\n        TimeCreateExpression.time_create_expression(self)\n        TimeParameteriseModel.time_parameterise(self)", "min_run_count": 2, "name": "unit_benchmarks.TimeDiscretiseModel.time_discretise", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4fbfe1ce99553daa3ea65f929308b968644f29f5a930c12c92505465fb85c788", "warmup_time": -1}, "unit_benchmarks.TimeParameteriseModel.time_parameterise": {"code": "class TimeParameteriseModel:\n    def time_parameterise(self):\n        param = pybamm.ParameterValues(\n            {\n                \"Particle radius [m]\": 10e-6,\n                \"Diffusion coefficient [m2.s-1]\": 3.9e-14,\n                \"Interfacial current density [A.m-2]\": 1.4,\n                \"Faraday constant [C.mol-1]\": 96485,\n                \"Initial concentration [mol.m-3]\": 2.5e4,\n            }\n        )\n    \n        self.r = pybamm.SpatialVariable(\n            \"r\", domain=[\"negative particle\"], coord_sys=\"spherical polar\"\n        )\n    \n        self.geometry = {\n            \"negative particle\": {self.r: {\"min\": pybamm.Scalar(0), \"max\": self.R}}\n        }\n        param.process_model(self.model)\n        param.process_geometry(self.geometry)\n\n    def setup(self):\n        TimeCreateExpression.time_create_expression(self)", "min_run_count": 2, "name": "unit_benchmarks.TimeParameteriseModel.time_parameterise", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "58d52171a131f2e05d1ca3d07e0a65d958c048aa8fe7d01aa04959f95800017d", "warmup_time": -1}, "unit_benchmarks.TimeSolveModel.time_solve": {"code": "class TimeSolveModel:\n    def time_solve(self):\n        solver = pybamm.ScipySolver()\n        t = np.linspace(0, 3600, 600)\n        solver.solve(self.model, t)\n\n    def setup(self):\n        TimeCreateExpression.time_create_expression(self)\n        TimeParameteriseModel.time_parameterise(self)\n        TimeDiscretiseModel.time_discretise(self)", "min_run_count": 2, "name": "unit_benchmarks.TimeSolveModel.time_solve", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f55331e31db8421a38d5fc1cae40690d1af2dfe4dbbcfbbcf716519cf3ff2946", "warmup_time": -1}}, "machines": {"GitHubRunner": {"machine": "GitHubRunner", "version": 1}}, "tags": {"v0.1.0": 3643, "v0.2.0": 5009, "v0.2.1": 5355, "v0.2.2": 6071, "v0.2.3": 6518, "v0.2.4": 6881, "v0.3.0": 7440, "v0.3.0-beta": 7377, "v0.4.0": 8501, "v21.08": 9307, "v21.10": 9593, "v21.11": 9957, "v21.12": 10102, "v21.9": 9479, "v22.1": 10312, "v22.2": 10371, "v22.3": 10494, "v22.4": 10565, "v22.5": 10721}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}